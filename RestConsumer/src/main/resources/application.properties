server.port=20080

spring.application.name=RestConsumer
management.security.enabled=false
spring.profiles.active=dev
#spring.cloud.consul.discovery.hostname=localhost
#spring.cloud.consul.discovery.port=8500
spring.cloud.consul.discovery.tags=spring
spring.cloud.consul.discovery.instanceId=${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}

# logging
logging.pattern.console=%d{UNIX_MILLIS} %-5level %logger{36} --- %msg%n
logging.level.=debug

management.endpoint.metrics.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
# Whether exporting of metrics to StatsD is enabled.
management.metrics.export.statsd.enabled=true
# StatsD line protocol to use. datalog or esty
management.metrics.export.statsd.flavor=datadog
# Host of the StatsD server to receive exported metrics.
management.metrics.export.statsd.host=localhost
# Port of the StatsD server to receive exported metrics.
management.metrics.export.statsd.port=8125
# Total length of a single payload should be kept within your network's MTU.
management.metrics.export.statsd.max-packet-length=1400
# How often gauges will be polled. When a gauge is polled, its value is recalculated and if the value has changed (or publishUnchangedMeters is true), it is sent to the StatsD server.
management.metrics.export.statsd.polling-frequency=10s
# Whether to send unchanged meters to the StatsD server.
management.metrics.export.statsd.publish-unchanged-meters=true
# Maximum size of the queue of items waiting to be sent to the StatsD server.
# Protocol to use for the datadog statsd endpoint
management.metrics.export.statsd.protocol=udp